%implements s0_b0_xg47p_Start "C"

%function Start(block, system) Output
%assign cfgTxt = ""
%openfile cfgTxt
%assign localVarDecl = ""
%openfile localVarDecl

CXPtMax *_rtXPerturbMax;
CXPtMin *_rtXPerturbMin;
NeModelParameters modelParameters;
NeslSimulationData *simulationData;
NeslSimulator *tmp;
NeuDiagnosticManager *diagnosticManager;
NeuDiagnosticTree *diagnosticTree;
NeuDiagnosticTree *diagnosticTree_p;
char *msg;
char *msg_p;
real_T time;
real_T tmp_e;
int32_T tmp_i;
int_T tmp_m;
boolean_T tmp_p;
boolean_T val;
%closefile localVarDecl
%<SLibCG_TrackContStatesPerturbMax(0)>\
_rtXPerturbMax = %<(SLibCG_SE(SLibGetContStatesPerturbMaxStructPtr()))>;
%<SLibCG_TrackContStatesPerturbMin(0)>\
_rtXPerturbMin = %<(SLibCG_SE(SLibGetContStatesPerturbMinStructPtr()))>;
tmp = nesl_lease_simulator("%<TLC_STR_CTX(0)>", 0, 0);
rtDW.cl3tgvsylr = (void *)tmp;
tmp_p = pointer_is_null(rtDW.cl3tgvsylr);
if (tmp_p) {
    ModeloFinal_1349f7f3_1_gateway();
    tmp = nesl_lease_simulator("%<TLC_STR_CTX(1)>", 0, 0);
    rtDW.cl3tgvsylr = (void *)tmp;
}
%<(SaveDWorkRawMemoryForSimTargetOP("\"ModeloFinal/Configuraci\\x00F3n/Solver Configuration_100\"", "rtDW.cl3tgvsylr", "0U", "nesl_save_simdata", "nesl_restore_simdata"))>;
simulationData = nesl_create_simulation_data();
rtDW.hmosbraitf = (void *)simulationData;
diagnosticManager = rtw_create_diagnostics();
rtDW.oj41h43pnv = (void *)diagnosticManager;
modelParameters.mSolverType = NE_SOLVER_TYPE_ODE;
modelParameters.mSolverAbsTol = 0.001;
modelParameters.mSolverRelTol = 0.001;
modelParameters.mSolverModifyAbsTol = NE_MODIFY_ABS_TOL_NO;
modelParameters.mStartTime = 0.0;
modelParameters.mLoadInitialState = false;
modelParameters.mUseSimState = false;
modelParameters.mLinTrimCompile = false;
modelParameters.mLoggingMode = SSC_LOGGING_OFF;
modelParameters.mRTWModifiedTimeStamp = 6.21201365E+8;
modelParameters.mZcDisabled = false;
modelParameters.mUseModelRefSolver = false;
modelParameters.mTargetFPGAHIL = false;
tmp_e = %<(SLibCG_SE(SLibCGIRGetVarStepSolverPropertyValue("RelTol", "0.001")))>;
modelParameters.mSolverTolerance = tmp_e;
tmp_e = %<(SLibCG_SE(SLibCGIRGetFixStepSolverPropertyValue("FixedStep", "0.0")))>;
modelParameters.mFixedStepSize = tmp_e;
tmp_p = %<(SLibCG_SE(SLibCGIRHasCompiledModelPropertyValue("SolverType", "VariableStep")))>;
modelParameters.mVariableStepSolver = tmp_p;
tmp_p = %<(SLibCG_SE(SLibCGIRHasCompiledModelPropertyValue("Solver", "odeN")))>;
modelParameters.mIsUsingODEN = tmp_p;
tmp_p = %<(SLibCG_SE(SLibIsRapidAccelSimulating()))>;
val = %<(SLibCG_SE(RTMGetGlobalInitialStatesAvailable()))>;
if (tmp_p) {
    val = (val && %<(SLibCG_SE(LibIsFirstInitCond()))>);
}
modelParameters.mLoadInitialState = val;
modelParameters.mZcDisabled = false;
diagnosticManager = (NeuDiagnosticManager *)rtDW.oj41h43pnv;
diagnosticTree = neu_diagnostic_manager_get_initial_tree(diagnosticManager);
tmp_i = nesl_initialize_simulator((NeslSimulator *)rtDW.cl3tgvsylr, &modelParameters, diagnosticManager);
if (tmp_i != 0) {
    tmp_p = error_buffer_is_empty(%<(LibGetRTModelErrorStatus())>);
    if (tmp_p) {
        msg = rtw_diagnostics_msg(diagnosticTree);
        %<(LibSetRTModelErrorStatus("msg"))>;
    }
}
simulationData = (NeslSimulationData *)rtDW.hmosbraitf;
time = %<(SLibCG_SE(LibGetT()))>;
simulationData->mData->mTime.mN = 1;
simulationData->mData->mTime.mX = &time;
simulationData->mData->mContStates.mN = 440;
simulationData->mData->mContStates.mX = &rtX.fsfcwugsbi[0];
simulationData->mData->mDiscStates.mN = 0;
simulationData->mData->mDiscStates.mX = &rtDW.eudw5phfwv;
simulationData->mData->mModeVector.mN = 0;
simulationData->mData->mModeVector.mX = &rtDW.nyecjrnwiq;
tmp_p = %<(SLibCG_SE(SLibCGIRGetSolverFoundZcEvents()))>;
simulationData->mData->mFoundZcEvents = tmp_p;
simulationData->mData->mIsMajorTimeStep = %<(SLibCG_SE(LibIsMajorTimeStep()))>;
tmp_p = %<(SLibCG_SE(SLibCGIRGetSolverAssertCheck()))>;
simulationData->mData->mIsSolverAssertCheck = tmp_p;
tmp_p = %<(SLibCG_SE(RTMIsSolverCheckingCIC()))>;
simulationData->mData->mIsSolverCheckingCIC = tmp_p;
tmp_p = %<(SLibCG_SE(RTMIsSolverComputingJacobian()))>;
simulationData->mData->mIsComputingJacobian = tmp_p;
simulationData->mData->mIsEvaluatingF0 = (%<(SLibCG_SE(RTMGetEvaluatingF0ForJacobian()))> != 0);
tmp_p = %<(SLibCG_SE(RTMIsSolverRequestingReset()))>;
simulationData->mData->mIsSolverRequestingReset = tmp_p;
simulationData->mData->mIsModeUpdateTimeStep = %<(SLibCG_SE(RTMGetIsModeUpdateTimeStep()))>;
tmp_m = 0;
simulationData->mData->mInputValues.mN = 0;
simulationData->mData->mInputOffsets.mN = 1;
simulationData->mData->mInputOffsets.mX = &tmp_m;
simulationData->mData->mNumjacDxLo.mN = 440;
simulationData->mData->mNumjacDxLo.mX = &_rtXPerturbMin->fsfcwugsbi[0];
simulationData->mData->mNumjacDxHi.mN = 440;
simulationData->mData->mNumjacDxHi.mX = &_rtXPerturbMax->fsfcwugsbi[0];
diagnosticManager = (NeuDiagnosticManager *)rtDW.oj41h43pnv;
diagnosticTree_p = neu_diagnostic_manager_get_initial_tree(diagnosticManager);
tmp_i = ne_simulator_method((NeslSimulator *)rtDW.cl3tgvsylr, NESL_SIM_NUMJAC_DX_BOUNDS, simulationData, diagnosticManager);
if (tmp_i != 0) {
    tmp_p = error_buffer_is_empty(%<(LibGetRTModelErrorStatus())>);
    if (tmp_p) {
        msg_p = rtw_diagnostics_msg(diagnosticTree_p);
        %<(LibSetRTModelErrorStatus("msg_p"))>;
    }
}
%closefile cfgTxt
%<cfgTxt>
%<LibSetSystemField(system, "CachedStartLocalVars", localVarDecl)>
%endfunction
%function StartFcnProtoType(block, system) Output
%assign fcnProtoType = ""
%openfile fcnProtoType
static void Start(\
%assign comma = ""
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(0, 0, fcnProtoType)>
%endfunction

%implements s0_b0_xg47p_ForcingFunction "C"

%function ForcingFunction(block, system) Output
%assign cfgTxt = ""
%openfile cfgTxt
%assign localVarDecl = ""
%openfile localVarDecl

NeslSimulationData *simulationData;
NeuDiagnosticManager *diagnosticManager;
NeuDiagnosticTree *diagnosticTree;
XDot *_rtXdot;
char *msg;
real_T time;
int32_T tmp_e;
int_T tmp_p;
boolean_T tmp;
%closefile localVarDecl
_rtXdot = %<(SLibCG_SE(SLibGetContStatesDerivativeStructPtr()))>;
simulationData = (NeslSimulationData *)rtDW.hmosbraitf;
time = %<(SLibCG_SE(LibGetT()))>;
simulationData->mData->mTime.mN = 1;
simulationData->mData->mTime.mX = &time;
simulationData->mData->mContStates.mN = 440;
simulationData->mData->mContStates.mX = &rtX.fsfcwugsbi[0];
simulationData->mData->mDiscStates.mN = 0;
simulationData->mData->mDiscStates.mX = &rtDW.eudw5phfwv;
simulationData->mData->mModeVector.mN = 0;
simulationData->mData->mModeVector.mX = &rtDW.nyecjrnwiq;
tmp = %<(SLibCG_SE(SLibCGIRGetSolverFoundZcEvents()))>;
simulationData->mData->mFoundZcEvents = tmp;
simulationData->mData->mIsMajorTimeStep = %<(SLibCG_SE(LibIsMajorTimeStep()))>;
tmp = %<(SLibCG_SE(SLibCGIRGetSolverAssertCheck()))>;
simulationData->mData->mIsSolverAssertCheck = tmp;
tmp = %<(SLibCG_SE(RTMIsSolverCheckingCIC()))>;
simulationData->mData->mIsSolverCheckingCIC = tmp;
tmp = %<(SLibCG_SE(RTMIsSolverComputingJacobian()))>;
simulationData->mData->mIsComputingJacobian = tmp;
simulationData->mData->mIsEvaluatingF0 = (%<(SLibCG_SE(RTMGetEvaluatingF0ForJacobian()))> != 0);
tmp = %<(SLibCG_SE(RTMIsSolverRequestingReset()))>;
simulationData->mData->mIsSolverRequestingReset = tmp;
simulationData->mData->mIsModeUpdateTimeStep = %<(SLibCG_SE(RTMGetIsModeUpdateTimeStep()))>;
tmp_p = 0;
simulationData->mData->mInputValues.mN = 0;
simulationData->mData->mInputOffsets.mN = 1;
simulationData->mData->mInputOffsets.mX = &tmp_p;
simulationData->mData->mDx.mN = 440;
simulationData->mData->mDx.mX = &_rtXdot->fsfcwugsbi[0];
diagnosticManager = (NeuDiagnosticManager *)rtDW.oj41h43pnv;
diagnosticTree = neu_diagnostic_manager_get_initial_tree(diagnosticManager);
tmp_e = ne_simulator_method((NeslSimulator *)rtDW.cl3tgvsylr, NESL_SIM_DERIVATIVES, simulationData, diagnosticManager);
if (tmp_e != 0) {
    tmp = error_buffer_is_empty(%<(LibGetRTModelErrorStatus())>);
    if (tmp) {
        msg = rtw_diagnostics_msg(diagnosticTree);
        %<(LibSetRTModelErrorStatus("msg"))>;
    }
}
%closefile cfgTxt
%<cfgTxt>
%<LibSetSystemField(system, "CachedForcingFunctionLocalVars", localVarDecl)>
%endfunction
%function ForcingFunctionFcnProtoType(block, system) Output
%assign fcnProtoType = ""
%openfile fcnProtoType
static void ForcingFunction(\
%assign comma = ""
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(0, 6, fcnProtoType)>
%endfunction
